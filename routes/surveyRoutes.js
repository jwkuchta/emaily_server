const _ = require('lodash')
const { Path } = require('path-parser')
const { URL } = require('url') // methods to parse url, we will use URL
const mongoose = require('mongoose')
const requireLogin = require('../middlewares/requireLogin')
const requireCredits = require('../middlewares/requireCredits')
const Mailer = require('../services/Mailer')
const surveyTemplate = require('../services/emailTemplates/surveyTemplate')

const Survey = mongoose.model('surveys')

module.exports = app => {

    // we don't need a list of recipients for this query and it might not matter on a small scale
    // but we can also tell MondoDB and Mongoose not to pull out the list of recipients with query#select (mongoose API)
    app.get('/api/surveys', requireLogin, async (req, res) => {
        const surveys = await Survey.find({ _user: req.user.id }).select({ recipients: false })
        res.send(surveys)
    })

    app.get('/api/surveys/:surveyId/:choice', (req, res) => {
        res.send('Thanks for your feedback!')
    })

    // app.post('/api/surveys/webhooks', (req, res) => {
    //     const events = _.map(req.body, event => {
    //         const pathname = new URL(event.url).pathname
    //         const p = new Path('/api/surveys/:surveyId/:choice')
    //         const match = p.test(pathname)
    //         if (match) {
    //             return { email: event.email, surveyId: match.surveyId, choice: match.choice }
    //         }
    //     })
    //     const compactEvents = _.compact(events)
    //     const uniqueEvents = _.uniqBy(compactEvents, 'email', 'surveyId')
    //     console.log(uniqueEvents)
    //     res.send({})
    // })

    // this is not asynchronous because SendGrid doesn't need anything back
    const findAndUpdateSurvey = event => {
        const choice = 'yes' || 'no'

        // this is a MongoDB query
        Survey.updateOne({
            _id: event.surveyId, // this is how it is saved in MongoDB, mongoose lets you use 'id'
            recipients: {
                $elemMatch: { email: event.email, responded: false }
            }  
        }, 
        {
            $inc: { [event.choice]: 1 },
            $set: { 'recipients.$.responded': true},
            lastResponded: new Date()
        })
        .exec()
    }


    // refactored with the chain method provided by lodash to avoid creating variables unnecessarily
    app.post('/api/surveys/webhooks', (req, res) => {
        const p = new Path('/api/surveys/:surveyId/:choice')
        const events = _.chain(req.body)
        .map(({ email, url }) => { 
            const match = p.test(new URL(url).pathname)
            if (match) {
                return { email, surveyId: match.surveyId, choice: match.choice }
            }
        })
        .compact()
        .uniqBy('email', 'surveyId')
        .each(event => findAndUpdateSurvey(event))
        .value()
        res.send({})
    })

    app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
        const { title, subject, body, recipients } = req.body

        const survey = new Survey({
            title,
            subject,
            body,
            recipients: recipients.split(',').map(email => ({ email: email.trim() })),
            _user: req.user.id, // current user id generated by MongoDB
            dateSent: Date.now()
        })

        const mailer = new Mailer(survey, surveyTemplate(survey))

        try {
            // we need the mailer here to send the email after the survey is created
            await mailer.send()
            await survey.save()
            req.user.credits -= 1
            const user = await req.user.save()

            res.send(user) // because the old user is stale
        } catch (error) {
            res.status(422).send(error)
        }
    })
}


